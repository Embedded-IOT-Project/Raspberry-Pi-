from flask import Flask, render_template, Response
import cv2
from pyzbar.pyzbar import decode
import numpy as np

app = Flask(__name__)
camera = cv2.VideoCapture('/dev/video0', cv2.CAP_V4L2)
camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

def generate_frames():
    while True:
        success, frame = camera.read()
        if not success:
            break

        frame = cv2.resize(frame, (640, 480))
        decoded_objects = decode(frame)
        for obj in decoded_objects:
            pts = obj.polygon if len(obj.polygon) == 4 else cv2.convexHull(np.array([point for point in obj.polygon], dtype=np.float32))
            cv2.polylines(frame, [np.int32(pts)], True, (0, 0, 255), 3)
            cv2.putText(frame, obj.data.decode(), (obj.rect[0], obj.rect[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

@app.route('/')
def index(): return render_template('index.html')

@app.route('/video')
def video(): return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
