from flask import Flask, render_template, Response
import cv2
import numpy as np
import time
import os
from pyzbar.pyzbar import decode

app = Flask(__name__)

# Path to Haar Cascade XML for face detection
face_detector = cv2.CascadeClassifier('/home/prince/Desktop/streaming/haarcascade_frontalface_default.xml')

# Open the webcam (USB) on Raspberry Pi
camera = cv2.VideoCapture('/dev/video0', cv2.CAP_V4L2)
camera.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

# Folder to save detected face images
output_directory = "detected_faces"
os.makedirs(output_directory, exist_ok=True)

def generate_frames():
    prev_time = time.time()

    while True:
        success, frame = camera.read()
        if not success:
            break

        # Resize the frame to improve performance
        frame = cv2.resize(frame, (640, 480))

        # FACE DETECTION
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, 1.1, 5)

        if len(faces) > 0:
            # Focus on largest face
            faces = sorted(faces, key=lambda f: f[2] * f[3], reverse=True)
            (x, y, w, h) = faces[0]
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

            center_x, center_y = x + w // 2, y + h // 2
            coord_text = f"({center_x}, {center_y})"
            cv2.putText(frame, coord_text, (x, y + h + 25), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

            # Save face crop
            timestamp = int(time.time())
            filename = os.path.join(output_directory, f"face_{timestamp}.jpg")
            face_crop = frame[y:y + h, x:x + w]
            cv2.imwrite(filename, face_crop)

        # QR CODE DETECTION
        decoded_objects = decode(frame)
        for obj in decoded_objects:
            points = obj.polygon
            pts = points if len(points) == 4 else cv2.convexHull(np.array([p for p in points], dtype=np.float32))
            cv2.polylines(frame, [np.int32(pts)], True, (0, 0, 255), 3)

            qr_data = obj.data.decode('utf-8')
            qr_type = obj.type
            text = f"{qr_data} ({qr_type})"
            cv2.putText(frame, text, (obj.rect[0], obj.rect[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)

        # FPS OVERLAY (optional)
        curr_time = time.time()
        fps = 1 / (curr_time - prev_time)
        prev_time = curr_time
        cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

        # Encode the frame for MJPEG streaming
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()

        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

# Flask Routes
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video')
def video():
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Run the App
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
